openapi: 3.0.1
info:
  title: Auth Service
  description:  |
    C'est un service qui prend en charge l'authentification.
    Il utilise un objet "user" similaire au service profile que
    nous avons vu précédemment, mais ne stocke que le id d'user et
    le mot de passe. Il crée des tokens si la connexion est réussie.
    Un token est juste une string aléatoire. Les tokens sont transférés
    dans l'en-tête "X-Token". Une requête get vers /token vérifie si un
    token est valide. Un utilisateur peut avoir plusieurs tokens valides !
  
  contact:
    email: hans-jorg.schurr@univ-lorraine.fr
  version: 1.0.0
servers:
- url: http://localhost:8080
tags:
- name: user
  description: Opérations sur les users
- name: token
  description: Opérations sur les tokens
paths:
  /AS/users:
    put:
      tags:
      - user
      summary: Créer un nouvel user avec un mot de passe
      requestBody:
        description: L'objet user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        200:
          description: L'id de l'user nouvellement créé
          content:
            text/plain:
              schema:
                type: integer
                format: int64
        405:
          description: User invalide, ou l'id est déjà utilisé
          content: {}
  /AS/users/{userId}:
    get:
      tags:
      - user
      summary: Tester si un user avec cet id existe
      description: Renvoie l'user s'il est trouvé (sans le mot de passe !)
      parameters:
      - name: userId
        in: path
        description: ID of user to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Un user avec cet id existe, il suffit de retourner l'id.
          content:
            application/json:
              schema:
                type: integer
                format: int64
        404:
          description: User not found
          content: {}

    delete:
      tags:
      - user
      summary: Supprimer un user
      description: Cela rend tous les token associés à cet user invalides.
      parameters:
      - name: userId
        in: path
        description: Id de l'user à supprimer
        required: true
        example: 5
        schema:
          type: integer
          format: int64
      - name: X-Token
        in: header
        description: Un token valide pour cet user (voir get sur /token)
        example: "39486RVUTW"
        schema:
          type: string
        required: true
      responses:
        401:
          description: Le token n'était pas valide.
        403:
          description: Le token est pour un autre user.
        404:
          description: User non trouvé
    
  /AS/users/{userId}/password:         
    put:
      tags:
      - user
      summary: Changer le mot de passe d'un user.
      requestBody:
        description: Le nouveau mot de passe
        content:
          text/plain:
            schema:
              type: string
            example: "test345"
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
          
      - name: X-Token
        in: header
        description: Un token valide pour cet user (voir get sur /token)
        example: "39486RVUTW"
        schema:
          type: string
        required: true
      responses:
        401:
          description: Le token n'était pas valide.
        403:
          description: Le token est pour un autre user.
        404:
          description: User non trouvé
  
  /AS/users/{userId}/token:         
    put:
      tags:
      - token
      summary: Connexion de l'user
      description: |
        Cette opération est réussie si le mot de passe correspond
        au mot de passe actuel de l'user.  Elle renvoie un token
        (une string aléatoire) qui est valide pendant 5 minutes.
      requestBody:
        description: Le mot de passe
        content:
          text/plain:
            schema:
              type: string
            example: "test345"
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Le nouveau token
          content:
            text/plain:
              schema:
                type: string
                example: "ABC2123"
            
        401:
          description: Le mot de passe n'est pas correct.
        404:
          description: User non trouvé
    delete:
      tags:
      - token
      summary: Déconnexion d'un user
      description: Cela rend tous les tokens associés à cet user invalides.  Pas seulement le token utilisé pour cette demande.
      parameters:
      - name: userId
        in: path
        description: Id de l'user à supprimer
        required: true
        example: 5
        schema:
          type: integer
          format: int64
      - name: X-Token
        in: header
        description: Un token valide pour cet user (voir get sur /token)
        example: "39486RVUTW"
        schema:
          type: string
        required: true
      responses:
        401:
          description: Le token n'était pas valide.
        403:
          description: Le token est pour un autre user.
        404:
          description: User non trouvé

  /token:
    get:
      tags:
      - token
      summary: Tester si un token est valide
      description: |
        Un token est valide s'il a été créé avec succès par 
        un post vers /token, s'il n'a pas été créé il y a plus
        de 5 minutes, s'il n'a pas été supprimé et si 
        l'user de ce token existe toujours.
      parameters:
      - name: X-Token
        in: header
        description: Un token valide
        example: "39486RVUTW"
        schema:
          type: string
        required: true
      responses:
        200:
          description: Le token est valide, renvoie l'id de user qui possède ce token.
          content:
            application/json:
              schema:
                type: integer
                format: int64
        401:
          description: Le token n'était pas valide.

components:
  schemas:
    NewUser:
      type: object
      description: Objet utilisé pour créer un nouvel user.  Il contient donc un mot de passe.
      properties:
        id:
          type: integer
          format: int64
        password:
          type: string
      required:
        - name
        - password
      example:
        id: 5
        password: "password123"
